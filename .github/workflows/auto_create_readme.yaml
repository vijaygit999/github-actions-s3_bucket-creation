Got it 👍 You want **a complete setup**:

* GitHub Actions CI/CD pipeline
* Terraform backend (S3 + DynamoDB for state & locking)
* Terraform code to create an S3 bucket
* A `README.md` with one-time setup instructions

Here’s a clean project structure 👇

---

## 📂 Project Structure

```
terraform-s3-pipeline/
├── .github/
│   └── workflows/
│       └── terraform.yml
├── terraform/
│   ├── backend.tf
│   ├── main.tf
│   ├── variables.tf
│   ├── outputs.tf
│   └── provider.tf
└── README.md
```

---

## 📝 terraform/backend.tf

```hcl
terraform {
  backend "s3" {
    bucket         = "my-terraform-backend-bucket" # Replace with your backend bucket
    key            = "s3-project/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-locks"
    encrypt        = true
  }
}
```

---

## 📝 terraform/provider.tf

```hcl
provider "aws" {
  region = var.aws_region
}
```

---

## 📝 terraform/main.tf

```hcl
resource "aws_s3_bucket" "demo" {
  bucket = var.bucket_name

  tags = {
    Name        = "DemoBucket"
    Environment = "Dev"
  }
}
```

---

## 📝 terraform/variables.tf

```hcl
variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "bucket_name" {
  description = "S3 bucket name"
  type        = string
}
```

---

## 📝 terraform/outputs.tf

```hcl
output "bucket_name" {
  value = aws_s3_bucket.demo.bucket
}
```

---

## 📝 .github/workflows/terraform.yml

```yaml
name: Terraform S3 Bucket Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var="bucket_name=my-demo-pipeline-bucket"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: terraform
        run: terraform apply -auto-approve -var="bucket_name=my-demo-pipeline-bucket"
```

---

## 📝 README.md

````markdown
# Terraform S3 Bucket with GitHub Actions CI/CD

This project creates an **S3 bucket** using Terraform and manages state with:
- **S3 backend** for remote state
- **DynamoDB table** for state locking

---

## 🚀 One-Time Setup

### 1. Create Backend Resources
Before running the pipeline, create the backend S3 bucket and DynamoDB table manually:

```bash
aws s3 mb s3://my-terraform-backend-bucket --region us-east-1
aws dynamodb create-table \
  --table-name terraform-locks \
  --attribute-definitions AttributeName=LockID,AttributeType=S \
  --key-schema AttributeName=LockID,KeyType=HASH \
  --billing-mode PAY_PER_REQUEST \
  --region us-east-1
````

### 2. Configure GitHub Secrets

Go to your repository **Settings > Secrets and variables > Actions** and add:

* `AWS_ACCESS_KEY_ID`
* `AWS_SECRET_ACCESS_KEY`
* `AWS_DEFAULT_REGION` (e.g., `us-east-1`)

### 3. Run Workflow

* Push to `main` branch or trigger manually via **Actions tab**.

---

## 🛠 How It Works

* **backend.tf** → Configures Terraform remote state in S3 with DynamoDB lock
* **main.tf** → Creates an S3 bucket
* **GitHub Actions** → Runs Terraform `init → validate → plan → apply` automatically

```

---

👉 This setup ensures **proper state management** with DynamoDB lock and a **CI/CD pipeline** in GitHub Actions.  

Do you want me to also include a **destroy workflow** (for cleanup) in `.github/workflows/terraform-destroy.yml`?
```
